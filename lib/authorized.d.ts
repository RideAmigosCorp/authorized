/* eslint-disable @typescript-eslint/no-unsafe-function-type */
/* eslint-disable @typescript-eslint/no-explicit-any */

/**
 * Generated by ChatGPT with some minor adoptions
 */
declare module 'authorized' {
  import { NextFunction, Request, Response } from 'express';

  // Error classes
  class ConfigError extends Error {
    constructor(message: string);
  }

  class UnauthorizedError extends Error {
    constructor(message: string);
  }

  export const errors: {
    ConfigError: typeof ConfigError;
    UnauthorizedError: typeof UnauthorizedError;
  };

  // Role class
  export class Role {
    name: string;
    entity?: string;
    relation: string;

    constructor(config: string | { entity?: string; relation: string });

    static parseConfig(str: string): { entity: string; relation: string };
  }

  // View class
  export class View {
    entities: { [key: string]: any };
    actions: { [key: string]: boolean };
    roles: { [key: string]: boolean };

    constructor();

    can(action: string): boolean;

    freeze(): void;

    get(type: string): any | null;

    has(role: string | Role): boolean;
  }

  // Manager class
  export class Manager {
    private roleGetters_: { [key: string]: Function };
    private entityGetters_: { [key: string]: Function };
    private actionDefs_: { [key: string]: Role[] };
    private options: { pauseStream: boolean };

    constructor(options?: { pauseStream?: boolean });

    /**
     * Register the roles for a specific action.
     * @param {string} name Action name (e.g. 'add member to organization').
     * @param {Array<string | Role>} roles Roles allowed to perform this action.
     */
    action(name: string, roles: Array<string | Role>): void;

    /**
     * Create action-based authorization middleware.
     * @param {string} action Action name.
     * May also be called with multiple action arguments. Supplying '*' is an alternative to specifying all actions.
     * @return {function(req: Request, res: Response, next: NextFunction): void} Authorization middleware.
     */
    can(...actions: string[]): (req: Request, res: Response, next: NextFunction) => void;

    /**
     * Register a getter for an entity.
     * @param {string} type Entity type (e.g. 'organization').
     * @param {function(req: Request, done: (err: Error | null, entity: any) => void)} getter Function to get an entity from the request.
     */
    entity(type: string, getter: (req: Request, done: (err?: Error | null, entity?: any) => void) => void): void;

    /**
     * Register a getter for a role.
     *
     * 1. Without entity: (req: Request, done: (err: Error | null, has: boolean) => void) => void
     * 2. With entity: (entity: any, req: Request, done: (err: Error | null, has: boolean) => void) => void
     *
     * @param {string} role Role name (e.g. 'organization.owner').
     * @param {function} getter Function that determines if the current user has the given role.
     */
    role(
      role: string,
      getter: (entity: any, req: Request, done: (err?: Error | null, has?: boolean) => void) => void
    ): void;

    /**
     * Register a simple role without an entity.
     *
     * @param {string} role Role name (e.g. 'admin').
     * @param {function(req: Request, done: (err: Error | null, has: boolean) => void)} getter
     */
    // eslint-disable-next-line no-dupe-class-members
    role(
      role: string,
      getter: (req: Request, done: (err?: Error | null, has?: boolean) => void) => void
    ): void;

    /**
     * Get cached authorization info for a request.
     * @param {Request} req Request object.
     * @return {View} A cache of authorization info.
     */
    view(req: Request): View;

    private view_(req: Request): View;

    private getEntity_(type: string, req: Request, done: (err: Error | null, entity: any) => void): void;

    private actionAllowed_(action: string, req: Request, done: (err: Error | null, can: boolean) => void): void;

    private hasRole_(role: Role, req: Request, done: (err: Error | null, has: boolean) => void): void;
  }

  // Exports for default singleton
  const defaultManager: Manager;
  export default defaultManager;

}
